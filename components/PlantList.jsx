import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Alert, Button, Spinner } from 'react-bootstrap';
import Link from 'next/link';
import axios from 'axios';
import { API_BASE_URL } from '../lib/config';

function PlantList() {
  const [plants, setPlants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchPlants();
  }, []);

  const fetchPlants = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è —Å:', `${API_BASE_URL}/api/plants`);
      const response = await axios.get(`${API_BASE_URL}/api/plants`);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
      setPlants(response.data);
      setLoading(false);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ç–µ–Ω–∏–π: ${err.message}`);
      setLoading(false);
    }
  };

  const useDemoData = () => {
    const demoPlants = [
      {
        id: 1,
        name: "–ü–æ–º–∏–¥–æ—Ä—á–∏–∫",
        species: "–¢–æ–º–∞—Ç –ß–µ—Ä—Ä–∏",
        plantingDate: "2024-01-15",
        description: "–ü–µ—Ä–≤—ã–π –æ–ø—ã—Ç –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è —Ç–æ–º–∞—Ç–æ–≤",
        imageUrl: ""
      },
      {
        id: 2,
        name: "–ë–∞–∑–∏–ª–∏–∫ –¥—É—à–∏—Å—Ç—ã–π",
        species: "–ë–∞–∑–∏–ª–∏–∫",
        plantingDate: "2024-01-20",
        description: "–í—ã—Ä–∞—â–∏–≤–∞—é –Ω–∞ –∫—É—Ö–æ–Ω–Ω–æ–º –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ",
        imageUrl: ""
      }
    ];
    setPlants(demoPlants);
    setError('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    setLoading(false);
  };

  if (loading) {
    return (
      <Container className="mt-4">
        <div className="text-center">
          <Spinner animation="border" variant="success" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </Spinner>
          <p className="mt-3">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è...</p>
        </div>
      </Container>
    );
  }

  return (
    <Container className="mt-4">
      {error && (
        <Alert variant="warning" className="mb-4">
          <Alert.Heading>–í–Ω–∏–º–∞–Ω–∏–µ</Alert.Heading>
          <p>{error}</p>
          <hr />
          <div className="d-flex gap-2">
            <Button variant="outline-primary" onClick={fetchPlants}>
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
            <Button variant="outline-success" onClick={useDemoData}>
              –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            </Button>
          </div>
        </Alert>
      )}

      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h2>–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è {error && "(–¥–µ–º–æ)"}</h2>
              <p className="text-muted mb-0">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–æ—Å—Ç –∏ —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏</p>
            </div>
            <Link href="/add-plant" className="btn btn-success">
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
            </Link>
          </div>
        </Col>
      </Row>

      {plants.length === 0 && !error ? (
        <Row>
          <Col className="text-center">
            <Card className="p-5 border-dashed">
              <Card.Body>
                <div className="text-muted mb-3" style={{ fontSize: '4rem' }}>üå±</div>
                <h4>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π</h4>
                <p className="text-muted mb-4">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</p>
                <Link href="/add-plant" className="btn btn-success btn-lg">
                  –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
                </Link>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      ) : (
        <Row>
          {plants.map(plant => (
            <Col key={plant.id} md={6} lg={4} className="mb-4">
              <Card className="plant-card h-100 shadow-sm">
                <Card.Body className="d-flex flex-column">
                  <Card.Title className="text-success">{plant.name}</Card.Title>
                  <Card.Subtitle className="mb-2 text-muted">
                    {plant.species}
                  </Card.Subtitle>
                  <Card.Text className="flex-grow-1">
                    <small className="text-muted">
                      üìÖ –ü–æ—Å–∞–∂–µ–Ω–æ: {new Date(plant.plantingDate).toLocaleDateString('ru-RU')}
                    </small>
                  </Card.Text>
                  {plant.description && (
                    <Card.Text className="text-muted small">
                      {plant.description}
                    </Card.Text>
                  )}
                </Card.Body>
                <Card.Footer className="bg-transparent">
                  <Link 
                    href={`/plants/${plant.id}`} 
                    className="btn btn-outline-success btn-sm w-100"
                  >
                    üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </Link>
                </Card.Footer>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
}

export default PlantList;