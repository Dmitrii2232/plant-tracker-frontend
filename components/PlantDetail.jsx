import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Container, Row, Col, Card, Button, Form, Alert, Tab, Tabs, Badge } from 'react-bootstrap';
import axios from 'axios';
import { API_BASE_URL } from '../lib/config';
import GrowthChart from './GrowthChart';

function PlantDetail() {
  const router = useRouter();
  const { id } = router.query;
  
  const [plant, setPlant] = useState(null);
  const [growthRecords, setGrowthRecords] = useState([]);
  const [careTasks, setCareTasks] = useState([]);
  const [newRecord, setNewRecord] = useState({
    height: '',
    leafCount: '',
    notes: '',
    imageUrl: ''
  });
  const [newTask, setNewTask] = useState({
    taskType: '–ø–æ–ª–∏–≤',
    description: '',
    dueDate: '',
    priority: 2
  });
  const [activeTab, setActiveTab] = useState('info');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (id && id !== 'undefined') {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ID:', id);
      fetchPlantData();
      fetchGrowthRecords();
      fetchCareTasks();
    }
  }, [id]);

  const fetchPlantData = async () => {
    try {
      const plantId = parseInt(id);
      
      if (isNaN(plantId)) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å—Ç–µ–Ω–∏—è: ${id}`);
      }
      
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ID:', plantId);
      const response = await axios.get(`${API_BASE_URL}/api/plants/${plantId}`);
      setPlant(response.data);
      setLoading(false);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: ${err.response?.data || err.message}`);
      setLoading(false);
    }
  };

  const fetchGrowthRecords = async () => {
    try {
      const plantId = parseInt(id);
      if (!isNaN(plantId)) {
        const response = await axios.get(`${API_BASE_URL}/api/plants/${plantId}/growth-records`);
        setGrowthRecords(response.data);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π –æ —Ä–æ—Å—Ç–µ:', err);
    }
  };

  const fetchCareTasks = async () => {
    try {
      const plantId = parseInt(id);
      if (!isNaN(plantId)) {
        const response = await axios.get(`${API_BASE_URL}/api/plants/${plantId}/tasks`);
        setCareTasks(response.data);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', err);
    }
  };

  const handleAddRecord = async (e) => {
    e.preventDefault();
    try {
      const plantId = parseInt(id);
      const recordData = {
        ...newRecord,
        height: parseFloat(newRecord.height),
        leafCount: newRecord.leafCount ? parseInt(newRecord.leafCount) : null,
        recordDate: new Date().toISOString()
      };
      
      await axios.post(`${API_BASE_URL}/api/plants/${plantId}/growth-records`, recordData);
      setNewRecord({ height: '', leafCount: '', notes: '', imageUrl: '' });
      fetchGrowthRecords();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    }
  };

  const handleAddTask = async (e) => {
    e.preventDefault();
    try {
      const plantId = parseInt(id);
      await axios.post(`${API_BASE_URL}/api/plants/${plantId}/tasks`, newTask);
      setNewTask({ taskType: '–ø–æ–ª–∏–≤', description: '', dueDate: '', priority: 2 });
      fetchCareTasks();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
  };

  const handleTaskStatusChange = async (taskId, completed) => {
    try {
      const plantId = parseInt(id);
      await axios.put(`${API_BASE_URL}/api/plants/${plantId}/tasks/${taskId}/status`, {
        completed: completed
      });
      fetchCareTasks();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
    }
  };

  const getPriorityVariant = (priority) => {
    switch (priority) {
      case 1: return 'danger';
      case 2: return 'warning';
      case 3: return 'info';
      default: return 'secondary';
    }
  };

  const getTaskTypeIcon = (type) => {
    const icons = {
      '–ø–æ–ª–∏–≤': 'üíß',
      '—É–¥–æ–±—Ä–µ–Ω–∏–µ': 'üå±',
      '–æ–±—Ä–µ–∑–∫–∞': '‚úÇÔ∏è',
      '–ø–µ—Ä–µ—Å–∞–¥–∫–∞': 'üîÑ',
      '–¥—Ä—É–≥–æ–µ': 'üìù'
    };
    return icons[type] || 'üìù';
  };

  if (loading) return (
    <Container className="mt-4">
      <div className="text-center">
        <div className="spinner-border text-success" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p className="mt-2">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è...</p>
      </div>
    </Container>
  );

  if (error) return (
    <Container className="mt-4">
      <Alert variant="danger">
        <h5>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h5>
        <p>{error}</p>
        <div className="d-flex gap-2">
          <Button variant="primary" onClick={fetchPlantData}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
          <Button variant="outline-secondary" onClick={() => router.push('/plants')}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π
          </Button>
        </div>
      </Alert>
    </Container>
  );

  if (!plant) return (
    <Container className="mt-4">
      <Alert variant="warning">
        <h5>–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h5>
        <p>–†–∞—Å—Ç–µ–Ω–∏–µ —Å ID {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.</p>
        <Button variant="primary" onClick={() => router.push('/plants')}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π
        </Button>
      </Alert>
    </Container>
  );

  const pendingTasks = careTasks.filter(task => !task.completed);
  const completedTasks = careTasks.filter(task => task.completed);

  return (
    <Container className="mt-4">
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h2>{plant.name}</h2>
              <p className="text-muted mb-0">{plant.species}</p>
              <small className="text-muted">
                –ü–æ—Å–∞–∂–µ–Ω–æ: {new Date(plant.plantingDate).toLocaleDateString('ru-RU')}
              </small>
            </div>
            <Badge bg="success" className="fs-6">
              {growthRecords.length > 0 ? `${growthRecords[0].height} —Å–º` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            </Badge>
          </div>
          {plant.description && (
            <p className="mt-2">{plant.description}</p>
          )}
        </Col>
      </Row>

      <Tabs activeKey={activeTab} onSelect={(tab) => setActiveTab(tab)} className="mb-4">
        <Tab eventKey="info" title="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
          <Row>
            <Col lg={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–æ—Å—Ç–µ</h5>
                </Card.Header>
                <Card.Body>
                  <Form onSubmit={handleAddRecord}>
                    <Row>
                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>–í—ã—Å–æ—Ç–∞ (—Å–º) *</Form.Label>
                          <Form.Control
                            type="number"
                            step="0.1"
                            value={newRecord.height}
                            onChange={(e) => setNewRecord({...newRecord, height: e.target.value})}
                            required
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ä–∞—Å—Ç–µ–Ω–∏—è"
                          />
                        </Form.Group>
                      </Col>
                      <Col md={6}>
                        <Form.Group className="mb-3">
                          <Form.Label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç—å–µ–≤</Form.Label>
                          <Form.Control
                            type="number"
                            value={newRecord.leafCount}
                            onChange={(e) => setNewRecord({...newRecord, leafCount: e.target.value})}
                            placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
                          />
                        </Form.Group>
                      </Col>
                    </Row>
                    
                    <Form.Group className="mb-3">
                      <Form.Label>–ó–∞–º–µ—Ç–∫–∏</Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={3}
                        value={newRecord.notes}
                        onChange={(e) => setNewRecord({...newRecord, notes: e.target.value})}
                        placeholder="–õ—é–±—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã..."
                      />
                    </Form.Group>
                    
                    <div className="d-flex gap-2">
                      <Button type="submit" variant="success">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                      </Button>
                      <Button 
                        type="button" 
                        variant="outline-secondary"
                        onClick={() => setNewRecord({ height: '', leafCount: '', notes: '', imageUrl: '' })}
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å
                      </Button>
                    </div>
                  </Form>
                </Card.Body>
              </Card>
            </Col>

            <Col lg={4}>
              <Card>
                <Card.Header>
                  <h6 className="mb-0">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h6>
                </Card.Header>
                <Card.Body>
                  {growthRecords.length > 0 ? (
                    <div>
                      <p><strong>–¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞:</strong> {growthRecords[0].height} —Å–º</p>
                      {growthRecords[0].leafCount && (
                        <p><strong>–õ–∏—Å—Ç—å–µ–≤:</strong> {growthRecords[0].leafCount}</p>
                      )}
                      <p><strong>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</strong> {growthRecords.length}</p>
                      {growthRecords.length > 1 && (
                        <p><strong>–û–±—â–∏–π —Ä–æ—Å—Ç:</strong> 
                          +{(growthRecords[0].height - growthRecords[growthRecords.length - 1].height).toFixed(1)} —Å–º
                        </p>
                      )}
                    </div>
                  ) : (
                    <p className="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ</p>
                  )}
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        <Tab eventKey="growth" title="üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞">
          <Row>
            <Col>
              <GrowthChart growthRecords={growthRecords} />
            </Col>
          </Row>
        </Tab>

        <Tab eventKey="tasks" title="‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ —É—Ö–æ–¥—É">
          <Row>
            <Col lg={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h5>
                </Card.Header>
                <Card.Body>
                  {pendingTasks.length > 0 ? (
                    pendingTasks.map(task => (
                      <Card key={task.id} className="mb-3">
                        <Card.Body>
                          <div className="d-flex justify-content-between align-items-start">
                            <div className="d-flex align-items-center">
                              <Form.Check
                                type="checkbox"
                                checked={task.completed}
                                onChange={(e) => handleTaskStatusChange(task.id, e.target.checked)}
                                className="me-3"
                              />
                              <div>
                                <h6 className="mb-1">
                                  {getTaskTypeIcon(task.taskType)} {task.taskType}
                                </h6>
                                <p className="mb-1">{task.description}</p>
                                <small className="text-muted">
                                  –°—Ä–æ–∫: {new Date(task.dueDate).toLocaleDateString('ru-RU')}
                                </small>
                              </div>
                            </div>
                            <Badge bg={getPriorityVariant(task.priority)}>
                              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}
                            </Badge>
                          </div>
                        </Card.Body>
                      </Card>
                    ))
                  ) : (
                    <p className="text-muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                  )}
                </Card.Body>
              </Card>
            </Col>

            <Col lg={4}>
              <Card>
                <Card.Header>
                  <h6 className="mb-0">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</h6>
                </Card.Header>
                <Card.Body>
                  <Form onSubmit={handleAddTask}>
                    <Form.Group className="mb-3">
                      <Form.Label>–¢–∏–ø –∑–∞–¥–∞—á–∏</Form.Label>
                      <Form.Select
                        value={newTask.taskType}
                        onChange={(e) => setNewTask({...newTask, taskType: e.target.value})}
                      >
                        <option value="–ø–æ–ª–∏–≤">üíß –ü–æ–ª–∏–≤</option>
                        <option value="—É–¥–æ–±—Ä–µ–Ω–∏–µ">üå± –£–¥–æ–±—Ä–µ–Ω–∏–µ</option>
                        <option value="–æ–±—Ä–µ–∑–∫–∞">‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞</option>
                        <option value="–ø–µ—Ä–µ—Å–∞–¥–∫–∞">üîÑ –ü–µ—Ä–µ—Å–∞–¥–∫–∞</option>
                        <option value="–¥—Ä—É–≥–æ–µ">üìù –î—Ä—É–≥–æ–µ</option>
                      </Form.Select>
                    </Form.Group>

                    <Form.Group className="mb-3">
                      <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ *</Form.Label>
                      <Form.Control
                        type="text"
                        value={newTask.description}
                        onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                        placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
                        required
                      />
                    </Form.Group>

                    <Form.Group className="mb-3">
                      <Form.Label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è *</Form.Label>
                      <Form.Control
                        type="date"
                        value={newTask.dueDate}
                        onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
                        required
                      />
                    </Form.Group>

                    <Form.Group className="mb-3">
                      <Form.Label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Form.Label>
                      <Form.Select
                        value={newTask.priority}
                        onChange={(e) => setNewTask({...newTask, priority: parseInt(e.target.value)})}
                      >
                        <option value={1}>üî¥ –í—ã—Å–æ–∫–∏–π</option>
                        <option value={2}>üü° –°—Ä–µ–¥–Ω–∏–π</option>
                        <option value={3}>üîµ –ù–∏–∑–∫–∏–π</option>
                      </Form.Select>
                    </Form.Group>

                    <Button type="submit" variant="success" className="w-100">
                      ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                    </Button>
                  </Form>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>
      </Tabs>
    </Container>
  );
}

export default PlantDetail;