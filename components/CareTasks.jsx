import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Card, Button, Form, Badge, Alert, Row, Col, ListGroup } from 'react-bootstrap';
import axios from 'axios';

function CareTasks() {
  const router = useRouter();
  const { id } = router.query;
  
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState({
    taskType: '–ø–æ–ª–∏–≤',
    description: '',
    dueDate: '',
    priority: 2
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    if (id && id !== 'undefined') {
      fetchTasks();
    }
  }, [id]);

  const fetchTasks = async () => {
    try {
      const plantId = parseInt(id);
      if (!isNaN(plantId)) {
        const response = await axios.get(`http://localhost:8080/api/plants/${plantId}/tasks`);
        setTasks(response.data);
        setLoading(false);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
      setLoading(false);
    }
  };

  const handleCreateTask = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      const plantId = parseInt(id);
      if (!isNaN(plantId)) {
        await axios.post(`http://localhost:8080/api/plants/${plantId}/tasks`, newTask);
        setNewTask({ taskType: '–ø–æ–ª–∏–≤', description: '', dueDate: '', priority: 2 });
        setSuccess('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        fetchTasks();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setSuccess(''), 3000);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
  };

  const handleStatusChange = async (taskId, completed) => {
    try {
      const plantId = parseInt(id);
      if (!isNaN(plantId)) {
        await axios.put(`http://localhost:8080/api/plants/${plantId}/tasks/${taskId}/status`, {
          completed: completed
        });
        fetchTasks();
        
        if (completed) {
          setSuccess('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!');
          setTimeout(() => setSuccess(''), 2000);
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
    }
  };

  const handleDeleteTask = async (taskId) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
      try {
        const plantId = parseInt(id);
        if (!isNaN(plantId)) {
          await axios.delete(`http://localhost:8080/api/plants/${plantId}/tasks/${taskId}`);
          setSuccess('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!');
          fetchTasks();
          setTimeout(() => setSuccess(''), 2000);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
  };

  const getPriorityVariant = (priority) => {
    switch (priority) {
      case 1: return 'danger';
      case 2: return 'warning';
      case 3: return 'info';
      default: return 'secondary';
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case 1: return '–í—ã—Å–æ–∫–∏–π';
      case 2: return '–°—Ä–µ–¥–Ω–∏–π';
      case 3: return '–ù–∏–∑–∫–∏–π';
      default: return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
  };

  const getTaskTypeIcon = (type) => {
    const icons = {
      '–ø–æ–ª–∏–≤': 'üíß',
      '—É–¥–æ–±—Ä–µ–Ω–∏–µ': 'üå±',
      '–æ–±—Ä–µ–∑–∫–∞': '‚úÇÔ∏è',
      '–ø–µ—Ä–µ—Å–∞–¥–∫–∞': 'üîÑ',
      '–¥—Ä—É–≥–æ–µ': 'üìù'
    };
    return icons[type] || 'üìù';
  };

  const getTaskTypeText = (type) => {
    const texts = {
      '–ø–æ–ª–∏–≤': '–ü–æ–ª–∏–≤',
      '—É–¥–æ–±—Ä–µ–Ω–∏–µ': '–£–¥–æ–±—Ä–µ–Ω–∏–µ',
      '–æ–±—Ä–µ–∑–∫–∞': '–û–±—Ä–µ–∑–∫–∞',
      '–ø–µ—Ä–µ—Å–∞–¥–∫–∞': '–ü–µ—Ä–µ—Å–∞–¥–∫–∞',
      '–¥—Ä—É–≥–æ–µ': '–î—Ä—É–≥–æ–µ'
    };
    return texts[type] || type;
  };

  const isOverdue = (dueDate) => {
    return new Date(dueDate) < new Date();
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
  const pendingTasks = tasks.filter(task => !task.completed);
  const completedTasks = tasks.filter(task => task.completed);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º pending –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ
  const sortedPendingTasks = [...pendingTasks].sort((a, b) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–π)
    if (a.priority !== b.priority) {
      return a.priority - b.priority;
    }
    // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã –ø–µ—Ä–≤—ã–µ)
    return new Date(a.dueDate) - new Date(b.dueDate);
  });

  if (loading) {
    return (
      <div className="text-center py-4">
        <div className="spinner-border text-success" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p className="mt-2">–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...</p>
      </div>
    );
  }

  return (
    <Row>
      <Col lg={8}>
        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && <Alert variant="danger">{error}</Alert>}
        {success && <Alert variant="success">{success}</Alert>}

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
        <Card className="mb-4">
          <Card.Header className="bg-warning bg-opacity-10">
            <div className="d-flex justify-content-between align-items-center">
              <h5 className="mb-0">üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h5>
              <Badge bg="warning" className="fs-6">
                {pendingTasks.length}
              </Badge>
            </div>
          </Card.Header>
          <Card.Body>
            {sortedPendingTasks.length > 0 ? (
              <ListGroup variant="flush">
                {sortedPendingTasks.map(task => (
                  <ListGroup.Item key={task.id} className="px-0">
                    <div className="d-flex justify-content-between align-items-start">
                      <div className="d-flex align-items-start flex-grow-1">
                        <Form.Check
                          type="checkbox"
                          checked={task.completed}
                          onChange={(e) => handleStatusChange(task.id, e.target.checked)}
                          className="me-3 mt-1"
                        />
                        <div className="flex-grow-1">
                          <div className="d-flex align-items-center mb-1">
                            <span className="fs-5 me-2">
                              {getTaskTypeIcon(task.taskType)}
                            </span>
                            <div>
                              <h6 className="mb-0">
                                {getTaskTypeText(task.taskType)}
                              </h6>
                              <p className="mb-1 text-dark">{task.description}</p>
                            </div>
                          </div>
                          
                          <div className="d-flex flex-wrap gap-3">
                            <small className={`fw-medium ${
                              isOverdue(task.dueDate) ? 'text-danger' : 'text-muted'
                            }`}>
                              üìÖ {formatDate(task.dueDate)}
                              {isOverdue(task.dueDate) && ' üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'}
                            </small>
                            
                            <Badge bg={getPriorityVariant(task.priority)} className="me-2">
                              {getPriorityText(task.priority)}
                            </Badge>
                          </div>
                        </div>
                      </div>
                      
                      <Button
                        variant="outline-danger"
                        size="sm"
                        onClick={() => handleDeleteTask(task.id)}
                        title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                      >
                        üóëÔ∏è
                      </Button>
                    </div>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            ) : (
              <div className="text-center py-4">
                <div className="text-muted mb-3" style={{ fontSize: '3rem' }}>‚úÖ</div>
                <h6 className="text-muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</h6>
                <p className="text-muted mb-0">–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</p>
              </div>
            )}
          </Card.Body>
        </Card>

        {/* –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
        {completedTasks.length > 0 && (
          <Card>
            <Card.Header className="bg-success bg-opacity-10">
              <div className="d-flex justify-content-between align-items-center">
                <h6 className="mb-0">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</h6>
                <Badge bg="success" className="fs-6">
                  {completedTasks.length}
                </Badge>
              </div>
            </Card.Header>
            <Card.Body>
              <ListGroup variant="flush">
                {completedTasks.map(task => (
                  <ListGroup.Item key={task.id} className="px-0">
                    <div className="d-flex justify-content-between align-items-start">
                      <div className="d-flex align-items-start flex-grow-1">
                        <Form.Check
                          type="checkbox"
                          checked={true}
                          onChange={(e) => handleStatusChange(task.id, false)}
                          className="me-3 mt-1"
                        />
                        <div className="flex-grow-1">
                          <div className="text-decoration-line-through text-muted">
                            <div className="d-flex align-items-center mb-1">
                              <span className="fs-5 me-2">
                                {getTaskTypeIcon(task.taskType)}
                              </span>
                              <div>
                                <h6 className="mb-0">
                                  {getTaskTypeText(task.taskType)}
                                </h6>
                                <p className="mb-1">{task.description}</p>
                              </div>
                            </div>
                            <small>
                              üìÖ {formatDate(task.dueDate)} ‚Ä¢ 
                              <Badge bg="secondary" className="ms-2">
                                {getPriorityText(task.priority)}
                              </Badge>
                            </small>
                          </div>
                        </div>
                      </div>
                      
                      <Button
                        variant="outline-danger"
                        size="sm"
                        onClick={() => handleDeleteTask(task.id)}
                        title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                      >
                        üóëÔ∏è
                      </Button>
                    </div>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </Card.Body>
          </Card>
        )}
      </Col>

      <Col lg={4}>
        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
        <Card className="sticky-top" style={{ top: '20px' }}>
          <Card.Header className="bg-success text-white">
            <h6 className="mb-0">‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</h6>
          </Card.Header>
          <Card.Body>
            <Form onSubmit={handleCreateTask}>
              <Form.Group className="mb-3">
                <Form.Label>–¢–∏–ø –∑–∞–¥–∞—á–∏ *</Form.Label>
                <Form.Select
                  value={newTask.taskType}
                  onChange={(e) => setNewTask({...newTask, taskType: e.target.value})}
                  required
                >
                  <option value="–ø–æ–ª–∏–≤">üíß –ü–æ–ª–∏–≤</option>
                  <option value="—É–¥–æ–±—Ä–µ–Ω–∏–µ">üå± –£–¥–æ–±—Ä–µ–Ω–∏–µ</option>
                  <option value="–æ–±—Ä–µ–∑–∫–∞">‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞</option>
                  <option value="–ø–µ—Ä–µ—Å–∞–¥–∫–∞">üîÑ –ü–µ—Ä–µ—Å–∞–¥–∫–∞</option>
                  <option value="–¥—Ä—É–≥–æ–µ">üìù –î—Ä—É–≥–æ–µ</option>
                </Form.Select>
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ *</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={3}
                  value={newTask.description}
                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                  placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
                  required
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è *</Form.Label>
                <Form.Control
                  type="date"
                  value={newTask.dueDate}
                  onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
                  required
                  min={new Date().toISOString().split('T')[0]}
                />
                <Form.Text className="text-muted">
                  –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
                </Form.Text>
              </Form.Group>

              <Form.Group className="mb-4">
                <Form.Label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Form.Label>
                <Form.Select
                  value={newTask.priority}
                  onChange={(e) => setNewTask({...newTask, priority: parseInt(e.target.value)})}
                >
                  <option value={1}>üî¥ –í—ã—Å–æ–∫–∏–π</option>
                  <option value={2}>üü° –°—Ä–µ–¥–Ω–∏–π</option>
                  <option value={3}>üîµ –ù–∏–∑–∫–∏–π</option>
                </Form.Select>
                <Form.Text className="text-muted">
                  –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                </Form.Text>
              </Form.Group>

              <Button 
                type="submit" 
                variant="success" 
                className="w-100"
                size="lg"
              >
                üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
              </Button>
            </Form>
          </Card.Body>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Card className="mt-3">
          <Card.Header>
            <h6 className="mb-0">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á</h6>
          </Card.Header>
          <Card.Body>
            <div className="d-flex justify-content-between mb-2">
              <span>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</span>
              <Badge bg="primary">{tasks.length}</Badge>
            </div>
            <div className="d-flex justify-content-between mb-2">
              <span>–ê–∫—Ç–∏–≤–Ω—ã–µ:</span>
              <Badge bg="warning">{pendingTasks.length}</Badge>
            </div>
            <div className="d-flex justify-content-between mb-2">
              <span>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:</span>
              <Badge bg="success">{completedTasks.length}</Badge>
            </div>
            <div className="d-flex justify-content-between">
              <span>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:</span>
              <Badge bg="danger">
                {pendingTasks.filter(task => isOverdue(task.dueDate)).length}
              </Badge>
            </div>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  );
}

export default CareTasks;